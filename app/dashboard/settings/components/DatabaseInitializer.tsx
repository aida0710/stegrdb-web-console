'use client';

import React, {useState} from 'react';
import {Card, CardBody, CardHeader} from '@heroui/card';
import {Button} from '@heroui/button';
import {Accordion, AccordionItem} from '@heroui/accordion';
import {AlertTriangle, Database, RefreshCw} from 'lucide-react';
import {Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, useDisclosure} from '@heroui/modal';
import {useQuery} from '@/lib/hook/use-query';

// 初期化用のSQL
const NODE_TABLE_SQL = `
-- 既存のテーブルを削除
DROP TABLE IF EXISTS firewall_settings CASCADE;
DROP TABLE IF EXISTS node_activity CASCADE;
DROP TABLE IF EXISTS node_list CASCADE;

-- ノード情報を管理するテーブル
CREATE TABLE IF NOT EXISTS node_list (
    id SMALLINT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT
);

-- ファイアウォール設定のテーブル
CREATE TABLE IF NOT EXISTS firewall_settings
(
    id           SERIAL PRIMARY KEY,
    node_id      SMALLINT,
    filter_type  VARCHAR(50) NOT NULL CHECK (filter_type IN ('SrcIpAddress', 'DstIpAddress', 'SrcPort', 'DstPort', 'EtherType', 'IpProtocol', 'SrcMacAddress', 'DstMacAddress')),
    filter_value TEXT        NOT NULL,
    priority     SMALLINT    NOT NULL,
    policy       VARCHAR(20) NOT NULL CHECK (policy IN ('Whitelist', 'Blacklist'))
);

-- ノードの起動情報を記録するテーブル
CREATE TABLE IF NOT EXISTS node_activity (
    id SERIAL PRIMARY KEY,
    node_id SMALLINT NOT NULL,
    boot_time TIMESTAMPTZ DEFAULT NOW(),
    interface_name VARCHAR(255) NOT NULL,
    mac_address MACADDR NOT NULL,
    ip_addresses TEXT NOT NULL,
    FOREIGN KEY (node_id) REFERENCES node_list(id)
);

-- インデックスの作成
CREATE INDEX IF NOT EXISTS idx_firewall_settings_node_id ON firewall_settings(node_id);
CREATE INDEX IF NOT EXISTS idx_node_activity_node_id ON node_activity(node_id);
`;

const PACKETS_TABLE_SQL = `
-- 既存のテーブルとインデックスを削除
DROP INDEX IF EXISTS idx_packets_node_timestamp_included;
DROP INDEX IF EXISTS packets_timestamp_idx;
DROP TABLE IF EXISTS processed_packets CASCADE;
DROP TABLE IF EXISTS packets CASCADE;

-- メインテーブル作成
CREATE TABLE IF NOT EXISTS packets
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
    timestamp   TIMESTAMPTZ NOT NULL,
    node_id     SMALLINT    NOT NULL,
    src_mac     MACADDR     NOT NULL,
    dst_mac     MACADDR     NOT NULL,
    ether_type  INTEGER     NOT NULL,
    ip_protocol INTEGER     NOT NULL,
    src_ip      INET        NOT NULL,
    dst_ip      INET        NOT NULL,
    src_port    INTEGER     NOT NULL,
    dst_port    INTEGER     NOT NULL,
    raw_packet  BYTEA       NOT NULL,
    CONSTRAINT packets_pkey PRIMARY KEY (id, timestamp)
);

CREATE TABLE IF NOT EXISTS processed_packets (
    packet_id BIGINT,
    node_id SMALLINT,
    processed_at TIMESTAMPTZ DEFAULT NOW(),
    PRIMARY KEY (packet_id, node_id)
);

-- ハイパーテーブルへの変換（既存の場合はスキップ）
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM timescaledb_information.hypertables
        WHERE hypertable_name = 'packets'
    ) THEN
        PERFORM create_hypertable('packets', 'timestamp', chunk_time_interval => INTERVAL '1 hour');
    END IF;
END
$$;

-- 主要な検索パターン用のインデックス
CREATE INDEX IF NOT EXISTS idx_packets_node_timestamp_included ON packets (node_id, timestamp DESC) INCLUDE (raw_packet);

-- 圧縮設定（オプション）
ALTER TABLE packets SET (timescaledb.compress, timescaledb.compress_segmentby = 'node_id', timescaledb.compress_orderby = 'timestamp DESC');

-- 自動圧縮ポリシーの設定（オプション）
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM timescaledb_information.jobs
        WHERE proc_name = 'policy_compression'
    ) THEN
        PERFORM add_compression_policy('packets', INTERVAL '7 days');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        -- エラーを無視
END
$$;

-- 最後にtimestampのみのインデックスを削除
DROP INDEX IF EXISTS packets_timestamp_idx;
`;

export default function DatabaseInitializer() {
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);
    const [successMessage, setSuccessMessage] = useState<string | null>(null);
    const {isOpen, onOpen, onClose} = useDisclosure();
    const [selectedInitType, setSelectedInitType] = useState<'nodes' | 'packets' | 'all'>('all');

    const {execute} = useQuery();

    const handleInitialize = async () => {
        setLoading(true);
        setError(null);
        setSuccessMessage(null);

        try {
            let executedQueries: string[] = [];
            let executeCount = 0;

            // ノードとファイアウォール設定テーブルの初期化
            if (selectedInitType === 'nodes' || selectedInitType === 'all') {
                await execute(NODE_TABLE_SQL);
                executedQueries.push('ノード管理テーブルが初期化されました');
                executeCount++;
            }

            // パケットテーブルの初期化
            if (selectedInitType === 'packets' || selectedInitType === 'all') {
                await execute(PACKETS_TABLE_SQL);
                executedQueries.push('パケット管理テーブルが初期化されました');
                executeCount++;
            }

            setSuccessMessage(`データベースの初期化が完了しました。${executeCount}つのコンポーネントが初期化されました。`);
            onClose();
        } catch (err) {
            console.error('Failed to initialize database:', err);
            setError('データベースの初期化に失敗しました。');
        } finally {
            setLoading(false);
        }
    };

    const openInitDialog = (type: 'nodes' | 'packets' | 'all') => {
        setSelectedInitType(type);
        onOpen();
    };

    return (
        <div className='space-y-6'>
            {error && (
                <div className='rounded-md bg-danger-50 p-3 text-danger'>
                    <p>{error}</p>
                </div>
            )}

            {successMessage && (
                <div className='rounded-md bg-success-50 p-3 text-success'>
                    <p>{successMessage}</p>
                </div>
            )}

            <div className='flex items-start gap-3 rounded-md bg-warning-50 p-4'>
                <AlertTriangle className='mt-0.5 h-6 w-6 flex-shrink-0 text-warning' />
                <div>
                    <h3 className='font-semibold text-warning-700'>注意</h3>
                    <p className='text-warning-700'>
                        データベース初期化操作は既存のテーブル構造を上書きする可能性があります。
                        この操作は慎重に行ってください。必要な場合のみ実行してください。
                    </p>
                </div>
            </div>

            <Card>
                <CardHeader>
                    <h3 className='text-lg font-semibold'>データベース初期化オプション</h3>
                </CardHeader>
                <CardBody>
                    <div className='space-y-4'>
                        <div className='rounded-md border p-4'>
                            <div className='flex items-center justify-between'>
                                <div>
                                    <h4 className='font-medium'>ノードおよびファイアウォール設定テーブルの初期化</h4>
                                    <p className='mt-1 text-sm text-default-500'>node_list、firewall_settings、node_activity テーブルを作成・初期化します</p>
                                </div>
                                <Button
                                    color='primary'
                                    isDisabled={loading}
                                    startContent={<Database size={16} />}
                                    onPress={() => openInitDialog('nodes')}>
                                    初期化
                                </Button>
                            </div>
                        </div>

                        <div className='rounded-md border p-4'>
                            <div className='flex items-center justify-between'>
                                <div>
                                    <h4 className='font-medium'>パケット管理テーブルの初期化</h4>
                                    <p className='mt-1 text-sm text-default-500'>
                                        packets、processed_packets テーブルを作成し、TimescaleDB ハイパーテーブル設定を行います
                                    </p>
                                </div>
                                <Button
                                    color='primary'
                                    isDisabled={loading}
                                    startContent={<Database size={16} />}
                                    onPress={() => openInitDialog('packets')}>
                                    初期化
                                </Button>
                            </div>
                        </div>

                        <div className='rounded-md border bg-default-50 p-4'>
                            <div className='flex items-center justify-between'>
                                <div>
                                    <h4 className='font-medium'>すべてのテーブルを初期化</h4>
                                    <p className='mt-1 text-sm text-default-500'>すべてのテーブルを一括で初期化します</p>
                                </div>
                                <Button
                                    color='danger'
                                    isDisabled={loading}
                                    startContent={<RefreshCw size={16} />}
                                    onPress={() => openInitDialog('all')}>
                                    すべて初期化
                                </Button>
                            </div>
                        </div>
                    </div>
                </CardBody>
            </Card>

            <Card>
                <CardHeader>
                    <h3 className='text-lg font-semibold'>SQL スクリプト</h3>
                </CardHeader>
                <CardBody>
                    <Accordion>
                        <AccordionItem
                            key='nodes'
                            aria-label='ノード管理テーブルのSQL'
                            title='ノード管理テーブルのSQL'
                            subtitle='node_list、firewall_settings、node_activity テーブルの作成と初期データ'>
                            <pre className='overflow-auto rounded-md bg-default-50 p-4 text-sm'>
                                <code>{NODE_TABLE_SQL}</code>
                            </pre>
                        </AccordionItem>

                        <AccordionItem
                            key='packets'
                            aria-label='パケット管理テーブルのSQL'
                            title='パケット管理テーブルのSQL'
                            subtitle='packets、processed_packets テーブルの作成とTimescaleDB設定'>
                            <pre className='overflow-auto rounded-md bg-default-50 p-4 text-sm'>
                                <code>{PACKETS_TABLE_SQL}</code>
                            </pre>
                        </AccordionItem>
                    </Accordion>
                </CardBody>
            </Card>

            {/* 初期化確認モーダル */}
            <Modal
                isOpen={isOpen}
                onClose={onClose}>
                <ModalContent>
                    <ModalHeader>データベース初期化の確認</ModalHeader>
                    <ModalBody>
                        <div className='mb-4 flex items-start gap-3 rounded-md bg-danger-50 p-4'>
                            <AlertTriangle className='mt-0.5 h-6 w-6 flex-shrink-0 text-danger' />
                            <div>
                                <h3 className='font-semibold text-danger'>警告</h3>
                                <p className='text-danger-700'>
                                    この操作により既存のデータ構造が変更される可能性があります。
                                    進める前に、必要なバックアップが取られていることを確認してください。
                                </p>
                            </div>
                        </div>

                        <p>以下のテーブルを初期化します：</p>

                        <ul className='mt-2 list-inside list-disc space-y-1'>
                            {selectedInitType === 'nodes' || selectedInitType === 'all' ? (
                                <>
                                    <li>node_list</li>
                                    <li>firewall_settings</li>
                                    <li>node_activity</li>
                                </>
                            ) : null}

                            {selectedInitType === 'packets' || selectedInitType === 'all' ? (
                                <>
                                    <li>packets</li>
                                    <li>processed_packets</li>
                                </>
                            ) : null}
                        </ul>

                        <p className='mt-4 font-semibold'>本当に初期化を実行しますか？</p>
                    </ModalBody>
                    <ModalFooter>
                        <Button
                            color='default'
                            variant='light'
                            onPress={onClose}>
                            キャンセル
                        </Button>
                        <Button
                            color='danger'
                            isLoading={loading}
                            startContent={loading ? null : <Database size={16} />}
                            onPress={handleInitialize}>
                            {loading ? '初期化中...' : '初期化を実行'}
                        </Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </div>
    );
}
